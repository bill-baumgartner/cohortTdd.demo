name: Test HCT Cohort Definition

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-hct-cohort:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: "4.4.1"
        use-public-rspm: true
        
    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-4.4.1-${{ hashFiles('DESCRIPTION') }}
        restore-keys: ${{ runner.os }}-r-4.4.1-
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          libxml2-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libpng-dev \
          libtiff5-dev \
          libjpeg-dev \
          libharfbuzz-dev \
          libfribidi-dev
    
    - name: Install R dependencies
      run: |
        install.packages(c("remotes", "testthat", "devtools"))
        # Install CDMConnector dependencies that might be missing
        install.packages(c("DBI", "RSQLite", "duckdb", "CirceR", "SqlRender"))
        # Install cohortTdd package
        remotes::install_github("bill-baumgartner/cohortTdd")
        # Install any additional dependencies
        if (file.exists("DESCRIPTION")) {
          remotes::install_deps(dependencies = TRUE)
        }
      shell: Rscript {0}
      env:
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run HCT cohort validation tests
      run: |
        # Debug package loading
        cat("=== DEBUGGING PACKAGE LOADING ===\n")
        cat("R version:", R.version.string, "\n")
        cat("Installed packages:\n")
        print(installed.packages()[c("cohortTdd", "testthat", "devtools"), "Version"])
        
        # Check if cohortTdd.demo files exist
        cat("=== CHECKING DEMO PACKAGE FILES ===\n")
        if (file.exists("DESCRIPTION")) {
          cat("DESCRIPTION file exists\n")
          cat("Package name:", read.dcf("DESCRIPTION")[,"Package"], "\n")
        }
        if (dir.exists("tests")) {
          cat("tests directory exists\n")
          cat("Test files:", list.files("tests", recursive = TRUE), "\n")
        }
        if (dir.exists("inst")) {
          cat("inst directory exists\n")
          cat("Inst files:", list.files("inst", recursive = TRUE), "\n")
        }
        
        # Try to load cohortTdd explicitly
        cat("=== LOADING COHORTTDD PACKAGE ===\n")
        tryCatch({
          library(cohortTdd)
          cat("Successfully loaded cohortTdd\n")
        }, error = function(e) {
          cat("ERROR loading cohortTdd:", conditionMessage(e), "\n")
          quit(status = 1)
        })
        
        # Run tests and capture results
        cat("=== RUNNING TESTS ===\n")
        result <- devtools::test()
        
        # Check if any tests failed
        cat("=== TEST RESULTS ===\n")
        print(result)
        
        # Check for test failures more reliably
        has_failures <- FALSE
        if (is.data.frame(result) && "failed" %in% names(result)) {
          total_failed <- sum(result$failed, na.rm = TRUE)
          has_failures <- total_failed > 0
        } else {
          # Fallback: check the printed output for FAIL
          output_text <- capture.output(print(result))
          has_failures <- any(grepl("FAIL", output_text))
        }
        
        if (has_failures) {
          cat("** TESTS FAILED **\n")
          quit(status = 1)
        } else {
          cat("** ALL TESTS PASSED **\n")
        }
      shell: Rscript {0}
    
    
    - name: Upload test results on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results
        path: |
          tests/testthat/
          *.log